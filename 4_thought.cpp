#include<iostream>
#include<unordered_map>
using namespace std;
int times;
unordered_map<int,string> table;
unordered_map<int,string>::iterator itt;
int main()
{
    table[4+4+4+4]="4 + 4 + 4 + 4 = ";
    table[4+4+4-4]="4 + 4 + 4 - 4 = ";
    table[4+4+4*4]="4 + 4 + 4 * 4 = ";
    table[4+4+4/4]="4 + 4 + 4 / 4 = ";
    table[4+4-4+4]="4 + 4 - 4 + 4 = ";
    table[4+4-4-4]="4 + 4 - 4 - 4 = ";
    table[4+4-4*4]="4 + 4 - 4 * 4 = ";
    table[4+4-4/4]="4 + 4 - 4 / 4 = ";
    table[4+4*4+4]="4 + 4 * 4 + 4 = ";
    table[4+4*4-4]="4 + 4 * 4 - 4 = ";
    table[4+4*4*4]="4 + 4 * 4 * 4 = ";
    table[4+4*4/4]="4 + 4 * 4 / 4 = ";
    table[4+4/4+4]="4 + 4 / 4 + 4 = ";
    table[4+4/4-4]="4 + 4 / 4 - 4 = ";
    table[4+4/4*4]="4 + 4 / 4 * 4 = ";
    table[4+4/4/4]="4 + 4 / 4 / 4 = ";

    table[4-4+4+4]="4 - 4 + 4 + 4 = ";
    table[4-4+4-4]="4 - 4 + 4 - 4 = ";
    table[4-4+4*4]="4 - 4 + 4 * 4 = ";
    table[4-4+4/4]="4 - 4 + 4 / 4 = ";
    table[4-4-4+4]="4 - 4 - 4 + 4 = ";
    table[4-4-4-4]="4 - 4 - 4 - 4 = ";
    table[4-4-4*4]="4 - 4 - 4 * 4 = ";
    table[4-4-4/4]="4 - 4 - 4 / 4 = ";
    table[4-4*4+4]="4 - 4 * 4 + 4 = ";
    table[4-4*4-4]="4 - 4 * 4 - 4 = ";
    table[4-4*4*4]="4 - 4 * 4 * 4 = ";
    table[4-4*4/4]="4 - 4 * 4 / 4 = ";
    table[4-4/4+4]="4 - 4 / 4 + 4 = ";
    table[4-4/4-4]="4 - 4 / 4 - 4 = ";
    table[4-4/4*4]="4 - 4 / 4 * 4 = ";
    table[4-4/4/4]="4 - 4 / 4 / 4 = ";

    table[4*4+4+4]="4 * 4 + 4 + 4 = ";
    table[4*4+4-4]="4 * 4 + 4 - 4 = ";
    table[4*4+4*4]="4 * 4 + 4 * 4 = ";
    table[4*4+4/4]="4 * 4 + 4 / 4 = ";
    table[4*4-4+4]="4 * 4 - 4 + 4 = ";
    table[4*4-4-4]="4 * 4 - 4 - 4 = ";
    table[4*4-4*4]="4 * 4 - 4 * 4 = ";
    table[4*4-4/4]="4 * 4 - 4 / 4 = ";
    table[4*4*4+4]="4 * 4 * 4 + 4 = ";
    table[4*4*4-4]="4 * 4 * 4 - 4 = ";
    table[4*4*4*4]="4 * 4 * 4 * 4 = ";
    table[4*4*4/4]="4 * 4 * 4 / 4 = ";
    table[4*4/4+4]="4 * 4 / 4 + 4 = ";
    table[4*4/4-4]="4 * 4 / 4 - 4 = ";
    table[4*4/4*4]="4 * 4 / 4 * 4 = ";
    table[4*4/4/4]="4 * 4 / 4 / 4 = ";

    table[4/4+4+4]="4 / 4 + 4 + 4 = ";
    table[4/4+4-4]="4 / 4 + 4 - 4 = ";
    table[4/4+4*4]="4 / 4 + 4 * 4 = ";
    table[4/4+4/4]="4 / 4 + 4 / 4 = ";
    table[4/4-4+4]="4 / 4 - 4 + 4 = ";
    table[4/4-4-4]="4 / 4 - 4 - 4 = ";
    table[4/4-4*4]="4 / 4 - 4 * 4 = ";
    table[4/4-4/4]="4 / 4 - 4 / 4 = ";
    table[4/4*4+4]="4 / 4 * 4 + 4 = ";
    table[4/4*4-4]="4 / 4 * 4 - 4 = ";
    table[4/4*4*4]="4 / 4 * 4 * 4 = ";
    table[4/4*4/4]="4 / 4 * 4 / 4 = ";
    table[4/4/4+4]="4 / 4 / 4 + 4 = ";
    table[4/4/4-4]="4 / 4 / 4 - 4 = ";
    table[4/4/4*4]="4 / 4 / 4 * 4 = ";
    table[4/4/4/4]="4 / 4 / 4 / 4 = ";

    cin>>times;
    int *arr=new int[times];
    for(int i=0;i<times;i++)
    {
        cin>>arr[i];
    }
    for(int i=0;i<times;i++)
    {
        itt=table.find(arr[i]);
        if(itt!=table.end())
        {
            cout<<table[arr[i]]<<arr[i]<<"\n";
        }
        else
        {
            cout<<"no solution\n";
        }
    }
    return 0;
}